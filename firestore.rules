rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est administrateur
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Fonction pour vérifier si l'utilisateur est modérateur ou admin
    function isModerator() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin', 'moderator']);
    }
    
    // Règles pour la collection serrures
    match /serrures/{serrureId} {
      // Permettre à tous les utilisateurs (même non connectés) de lire les données
      allow read: if true;
      
      // Permettre aux modérateurs ET administrateurs de gérer les serrures
      allow create, update, delete: if isModerator();
    }
    
    // Règles pour la collection types-serrures
    match /types-serrures/{typeId} {
      // Permettre à tous les utilisateurs (même non connectés) de lire les données
      allow read: if true;
      
      // Permettre aux modérateurs ET administrateurs de gérer les types de serrures
      allow create, update, delete: if isModerator();
    }
    
    // Règles pour la collection users
    match /users/{userId} {
      // Tout utilisateur peut lire son propre profil
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Les administrateurs peuvent lire tous les profils
      allow read: if isAdmin();
      
      // Seuls les administrateurs peuvent modifier les rôles
      allow update: if isAdmin() || 
                    (request.auth != null && 
                     request.auth.uid == userId && 
                     !request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles']));
      
      // Créer son propre profil (lors de l'inscription)
      allow create: if request.auth != null && 
                     request.auth.uid == userId;
    }
    
    // Règles pour la collection carts (paniers)
    match /carts/{cartDocId} {
      // Permettre la création de paniers anonymes (sans authentification)
      allow create: if request.resource.data.userId == null;
      
      // Permettre la création de paniers utilisateur (avec authentification)
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Permettre la lecture/écriture pour TOUS les paniers (anonymes et utilisateur)
      // Les paniers anonymes sont accessibles sans authentification
      // Les paniers utilisateur sont protégés par leur cartId unique
      allow read, write: if true;
      
      // Les administrateurs peuvent lire tous les paniers
      allow read, write: if isAdmin();
    }
    
    // Règles pour la collection orders (commandes) - TRÈS PERMISSIVES
    match /orders/{orderId} {
      // L'utilisateur peut lire ses propres commandes
      allow read: if request.auth != null && 
                   resource.data.userId == request.auth.uid;
      
      // L'utilisateur peut créer ses propres commandes (AUCUNE vérification de rôle ou d'existence)
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // L'utilisateur peut mettre à jour ses propres commandes
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      
      // Les administrateurs peuvent lire et modifier toutes les commandes
      allow read, write: if isAdmin();
    }
    
    // Par défaut, refuser tout accès aux autres collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 